//
//  ViewController.swift
//  LoginScreen
//
//  Created by –î–∞–Ω–∏–∏–ª –ö–æ–∑–ª–æ–≤ on 04.10.2022.
//

import UIKit

class LogInScreenVC: UIViewController {
    
    @IBOutlet var userNameTF: UITextField!
    @IBOutlet var passwordTF: UITextField!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        userNameTF.delegate = self
        passwordTF.delegate = self
        
        userNameTF.returnKeyType = .next
        passwordTF.returnKeyType = .done
    }
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        if touches.first != nil {
            view.endEditing(true)
            super .touchesBegan(touches, with: event)
        }
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        guard let welcomeVC = segue.destination as? WelcomeVC else {
            return
        }
        welcomeVC.user = String("Welcome, \(userNameTF.text ?? "")!")
    }
    
    @IBAction func logInButtonPressed() {
        if userNameTF.text == "User" && passwordTF.text == "Password" {
        } else {
                showAlert(with: "Invalid login or password!", and: "Please, enter correct login and password")
            return
        }
    }
    
    @IBAction func forgotUserNameButton() {
        showAlert(with: "Oops!", and: "Your name is User ü•¥")
    }
    
    @IBAction func forgotPasswordButton() {
        showAlert(with: "Oops!", and: "Your password is Password üòΩ")
    }

    @IBAction func unwind(for segue: UIStoryboardSegue) {
        guard segue.source is WelcomeVC else {
            return
        }
        self.userNameTF.text = ""
        self.passwordTF.text = ""
    }
}

extension LogInScreenVC: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField == userNameTF {
            passwordTF.becomeFirstResponder() // –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–∂–µ –Ω–µ –ø–æ–Ω—è–ª
        } else {
            logInButtonPressed() // –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –í –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–µ –Ω–∞—à—ë–ª, –≤ —á–∞—Ç–µ –Ω–µ –ø–æ–º–æ–≥–ª–∏. –ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É, –±—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç, —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è. 3–π –¥–µ–Ω—å –Ω–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π —ç—Ç–æ–π –ª–æ–≥–∏–∫–∏. –ù–µ —Ö–æ—á—É –±–æ–ª—å—à–µ —Ç–µ—Ä—è—Ç—å –≤—Ä–µ–º—è –Ω–∞ —ç—Ç–æ–º.
        }
        return true
    }
}
extension LogInScreenVC {
    private func showAlert(with title: String, and message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        let okAction = UIAlertAction(title: "Ok", style: .default)
        alert.addAction(okAction)
        present(alert, animated: true)
    }
}
